version: "3.9"
services:
  # caddy:
  #   image: ghcr.io/busybeaver/homelab-packages/caddy:2023-04-08@sha256:eb37103fa2d68c2335089933fbebffdbaf56bbfb949a2abb93c37c47fbb0cf7d
  #   container_name: caddy
  #   network_mode: host
  #   labels:
  #      - networks=bridge
  #   # ports:
  #   #   - target: 80
  #   #     published: 80
  #   #     protocol: tcp
  #   #   - target: 443
  #   #     published: 443
  #   #     protocol: tcp
  #   dns: "${DNS_IP}"
  #   cap_drop:
  #     - ALL
  #   cap_add:
  #     - NET_BIND_SERVICE
  #   read_only: true
  #   tmpfs:
  #     - "/tmp:rw,noexec,nosuid,nodev,size=10m,mode=660,uid=${CADDY_USER},gid=${DOCKER_USER_GROUP}"
  #   volumes:
  #     - "${VOLUME_BASE_DIRECTORY}/caddy/data:/data:rw"
  #     - "${VOLUME_BASE_DIRECTORY}/caddy/config:/config:rw"
  #     - "${VOLUME_BASE_DIRECTORY}/caddy/certs:/certs:ro"
  #     - "${VOLUME_BASE_DIRECTORY}/caddy/Caddyfile:/etc/caddy/Caddyfile:ro"
  #   user: "${CADDY_USER}:${DOCKER_USER_GROUP}"
  #   environment:
  #     - "CF_API_TOKEN=${CF_API_TOKEN}"
  #   restart: always

  adguard-home:
    image: adguard/adguardhome@sha256:4016a420451810959f782d3cbe04c620d83c3431cbb13ae27aabd2921db482a0
    container_name: adguard-home
    networks:
      dockervlan:
        ipv4_address: "${DOCKER_VLAN_IP_PREFIX}.130"
    dns: "${DNS_IP}"
    user: "${ADGUARD_USER}:${DOCKER_USER_GROUP}"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - "/tmp:rw,noexec,nosuid,nodev,size=64m,mode=660,uid=${ADGUARD_USER},gid=${DOCKER_USER_GROUP}"
    volumes:
      - ${VOLUME_BASE_DIRECTORY}/adguard/conf:/opt/adguardhome/conf:rw
      - ${VOLUME_BASE_DIRECTORY}/adguard/work:/opt/adguardhome/work:rw
    environment:
      - TZ=${TIMEZONE}
    # healthcheck:
    #   test: ["executable", "arg"]
    #   interval: 1m30s
    #   timeout: 30s
    #   retries: 5
    #   start_period: 30s
    restart: always
  homebridge:
    image: homebridge/homebridge
    container_name: homebridge
    networks:
      dockervlan:
        ipv4_address: "${DOCKER_VLAN_IP_PREFIX}.131"
    # network_mode: host
    dns: "${DNS_IP}"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - "/tmp:rw,noexec,nosuid,nodev,size=32m,mode=660,uid=${HOMEBRIDGE_USER},gid=${DOCKER_USER_GROUP}"
      - "/run/s6:rw,noexec,nosuid,nodev,size=8m,mode=660,uid=${HOMEBRIDGE_USER},gid=${DOCKER_USER_GROUP}"
    volumes:
      - ${VOLUME_BASE_DIRECTORY}/homebridge:/homebridge:rw
    environment:
      - TZ=${TIMEZONE}
      - PUID=${HOMEBRIDGE_USER}
      - PGID=100
#      - "PGID=${DOCKER_USER_GROUP}"
      - HOMEBRIDGE_CONFIG_UI=1
      - HOMEBRIDGE_CONFIG_UI_PORT=80
#      - DSM_HOSTNAME=station
    restart: always

#   # TODO: this needs to be put into the internal network
#   homebridge:
#     # port: "${HOMEBRIDGE_PORT}"
#     image: homebridge/homebridge
#     container_name: homebridge
#     network_mode: host
#     dns: "${DNS_IP}"
#     volumes:
#       - ${VOLUME_BASE_DIRECTORY}/homebridge:/homebridge:rw
#     environment:
#       - TZ=${TIMEZONE}
#       - PUID=${HOMEBRIDGE_USER}
#       - PGID=100
# #      - "PGID=${DOCKER_USER_GROUP}"
#       - HOMEBRIDGE_CONFIG_UI=1
#       - HOMEBRIDGE_CONFIG_UI_PORT=${HOMEBRIDGE_PORT}
#       - DSM_HOSTNAME=station
#     restart: always

#   node-red:
#     image: ghcr.io/busybeaver/homelab-packages/node-red:2023-04-08@sha256:0b0824e95e851205592a6739e165ccac7f708e505f845b580b4f46f4224f7453
#     container_name: node-red
#     networks:
#       internal_network:
#         ipv4_address: "${INTERNAL_NETWORK_IP_PREFIX}.3"
#     expose:
#       - "${NODE_RED_PORT}"
#     dns: "${DNS_IP}"
#     cap_drop:
#       - ALL
#     cap_add:
#       - NET_BIND_SERVICE
#     read_only: true
#     tmpfs:
#       - "/tmp:rw,noexec,nosuid,nodev,size=10m,mode=660,uid=${NODE_RED_USER},gid=${DOCKER_USER_GROUP}"
#     volumes:
#       - "${VOLUME_BASE_DIRECTORY}/node-red/data:/data:rw"
#     user: "${NODE_RED_USER}:${DOCKER_USER_GROUP}"
#     environment:
#       - TZ=${TIMEZONE}
#       - PORT=${NODE_RED_PORT}
#     restart: always

#   n8n:
#     image: n8nio/n8n:1.0.4@sha256:ec5f5a6cfbcda11d02ed9ea594735e59f8dd061338abf63da940c3710b874d0f
#     container_name: n8n
#     networks:
#       internal_network:
#         ipv4_address: "${INTERNAL_NETWORK_IP_PREFIX}.4"
#     expose:
#       - "${N8N_PORT}"
#     dns: "${DNS_IP}"
#     cap_drop:
#       - ALL
#     cap_add:
#       - NET_BIND_SERVICE
#       - CHOWN
#       - SETUID
#       - SETGID
#     read_only: true
#     tmpfs:
#       - "/tmp:rw,noexec,nosuid,nodev,size=10m,mode=660,uid=${N8N_USER},gid=${DOCKER_USER_GROUP}"
#     volumes:
#       - "${VOLUME_BASE_DIRECTORY}/n8n/node:/home/node:rw"
#     # user: "${N8N_USER}:${DOCKER_USER_GROUP}"
#     # seems not to work with a dedicated user, since during container start, the user/group gets changed:
#     # https://github.com/n8n-io/n8n/blob/5c65a73cc21ac4348eaae6b6b010980ff789cefe/docker/images/n8n/docker-entrypoint.sh
#     environment:
#       - GENERIC_TIMEZONE=${TIMEZONE}
#       - TZ=${TIMEZONE}
#       - DB_TYPE=sqlite
#       - N8N_PORT=${N8N_PORT}
#       - N8N_DIAGNOSTICS_ENABLED=false
#       #- N8N_BASIC_AUTH_USER_FILE=
#       #- N8N_BASIC_AUTH_PASSWORD_FILE=
#       #- N8N_BASIC_AUTH_HASH=true
#       # - N8N_EDITOR_BASE_URL=${N8N_URL}
#       # - WEBHOOK_URL=${N8N_URL}
#     restart: always

networks:
  dockervlan:
    name: dockervlan
    driver: macvlan
    driver_opts:
      parent: ovs_bond0
    ipam:
      config:
        - subnet: "${DOCKER_VLAN_IP_PREFIX}.0/24"
          ip_range: "${DOCKER_VLAN_IP_PREFIX}.128/25"
          gateway: "${DNS_IP}"
