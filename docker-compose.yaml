version: "3.9"
services:
  # caddy:
  #   image: ghcr.io/busybeaver/homelab-packages/caddy:2023-04-08@sha256:eb37103fa2d68c2335089933fbebffdbaf56bbfb949a2abb93c37c47fbb0cf7d
  #   container_name: caddy
  #   network_mode: host
  #   labels:
  #      - networks=bridge
  #   # ports:
  #   #   - target: 80
  #   #     published: 80
  #   #     protocol: tcp
  #   #   - target: 443
  #   #     published: 443
  #   #     protocol: tcp
  #   dns: "${DNS_IP}"
  #   cap_drop:
  #     - ALL
  #   cap_add:
  #     - NET_BIND_SERVICE
  #   read_only: true
  #   tmpfs:
  #     - "/tmp:rw,noexec,nosuid,nodev,size=10m,mode=660,uid=${CADDY_USER},gid=${DOCKER_USER_GROUP}"
  #   volumes:
  #     - "${VOLUME_BASE_DIRECTORY}/caddy/data:/data:rw"
  #     - "${VOLUME_BASE_DIRECTORY}/caddy/config:/config:rw"
  #     - "${VOLUME_BASE_DIRECTORY}/caddy/certs:/certs:ro"
  #     - "${VOLUME_BASE_DIRECTORY}/caddy/Caddyfile:/etc/caddy/Caddyfile:ro"
  #   user: "${CADDY_USER}:${DOCKER_USER_GROUP}"
  #   environment:
  #     - "CF_API_TOKEN=${CF_API_TOKEN}"
  #   restart: always

  adguard-home:
    image: adguard/adguardhome:v0.107.51@sha256:3a143e6c071cd72b1aa5aa46ba0205a86f085d54daca94b7fc7ab6759e3fb6fa
    container_name: adguard-home
    networks:
      dockervlan:
        ipv4_address: "${DOCKER_VLAN_IP_PREFIX}.130"
    mac_address: "${ADGUARD_MAC_ADDRESS}"
    dns: "${DNS_IP}"
    user: "${ADGUARD_USER}:${DOCKER_USER_GROUP}"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    # security_opt:
    #   - no-new-privileges:true
    tmpfs:
      - "/tmp:rw,noexec,nosuid,nodev,size=64m,mode=660,uid=${ADGUARD_USER},gid=${DOCKER_USER_GROUP}"
    volumes:
      - ${VOLUME_BASE_DIRECTORY}/adguard/conf:/opt/adguardhome/conf:rw
      - ${VOLUME_BASE_DIRECTORY}/adguard/work:/opt/adguardhome/work:rw
      - ${VOLUME_BASE_DIRECTORY}/adguard/cert:/opt/adguardhome/cert:ro
    environment:
      - TZ=${TIMEZONE}
    # healthcheck:
    #   test: ["executable", "arg"]
    #   interval: 1m30s
    #   timeout: 30s
    #   retries: 5
    #   start_period: 30s
    restart: always

#   homebridge:
#     image: ghcr.io/busybeaver/homelab-packages/homebridge:latest@sha256:4ef9a16ecc0b24be5dd537e6b344491d72e4cd1a353790a347c908dad426fd94
#     container_name: homebridge
#     networks:
#       dockervlan:
#         ipv4_address: "${DOCKER_VLAN_IP_PREFIX}.133"
#     mac_address: "${HOMEBRIDGE_MAC_ADDRESS}"
#     # network_mode: host
#     dns: "${DNS_IP}"
#     user: "${HOMEBRIDGE_USER}:${DOCKER_USER_GROUP}"
#     cap_drop:
#       - ALL
#     cap_add:
#       - NET_BIND_SERVICE
#     read_only: true
#     # security_opt:
#     #   - no-new-privileges:true
#     tmpfs:
#       - "/tmp:rw,noexec,nosuid,nodev,size=32m,mode=660,uid=${HOMEBRIDGE_USER},gid=${DOCKER_USER_GROUP}"
#       # s6-overlay
#       # - "/run:rw,size=8m,uid=0"
#     volumes:
#       - ${VOLUME_BASE_DIRECTORY}/homebridge/accessories:/var/lib/homebridge/accessories:rw
#       - ${VOLUME_BASE_DIRECTORY}/homebridge/backups:/var/lib/homebridge/backups:rw
#       - ${VOLUME_BASE_DIRECTORY}/homebridge/persist:/var/lib/homebridge/persist:rw
#       - ${VOLUME_BASE_DIRECTORY}/homebridge/auth.json:/var/lib/homebridge/auth.json:rw
#       - ${VOLUME_BASE_DIRECTORY}/homebridge/config.json:/var/lib/homebridge/config.json:rw
#       - ${VOLUME_BASE_DIRECTORY}/homebridge/homebridge.log:/var/lib/homebridge/homebridge.log:rw
#     environment:
#       - TZ=${TIMEZONE}
#       # - PUID=${HOMEBRIDGE_USER}
#       # - PGID=100
# #      - "PGID=${DOCKER_USER_GROUP}"
#       - HOMEBRIDGE_CONFIG_UI=1
#       - HOMEBRIDGE_CONFIG_UI_PORT=80
# #      - DSM_HOSTNAME=station
#     restart: always

  uptime-kuma:
    image: ghcr.io/busybeaver/homelab-packages/uptime-kuma:2024-01-18@sha256:6596fe773dd151c7cfa7f79bd968dedb1e201b5240119e54fc2d92761e2420cd
    container_name: uptime-kuma
    networks:
      dockervlan:
        ipv4_address: "${DOCKER_VLAN_IP_PREFIX}.132"
    mac_address: "${UPTIME_KUMA_MAC_ADDRESS}"
    dns: "${DNS_IP}"
    user: "${UPTIME_KUMA_USER}:${DOCKER_USER_GROUP}"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      # health checks such as pings
      - NET_RAW
    read_only: true
    # security_opt:
    #   - no-new-privileges:true
    tmpfs:
      - "/tmp:rw,noexec,nosuid,nodev,size=64m,mode=660,uid=${UPTIME_KUMA_USER},gid=${DOCKER_USER_GROUP}"
    volumes:
      - ${VOLUME_BASE_DIRECTORY}/uptime-kuma/data:/app/data:rw
      - ${VOLUME_BASE_DIRECTORY}/uptime-kuma/cert:/app/cert:ro
    environment:
      - UPTIME_KUMA_PORT=443
      # change later to proper domain with the cert
      - UPTIME_KUMA_HOST=${DOCKER_VLAN_IP_PREFIX}.132
      - UPTIME_KUMA_SSL_KEY=/app/cert/cert.key
      - UPTIME_KUMA_SSL_CERT=/app/cert/cert.cer
      #- PUID=${UPTIME_KUMA_USER}
      #- PGID=${DOCKER_USER_GROUP}
    # healthcheck:
    #   test: ["executable", "arg"]
    #   interval: 1m30s
    #   timeout: 30s
    #   retries: 5
    #   start_period: 30s
    restart: always

  node-red:
    image: ghcr.io/busybeaver/homelab-packages/node-red:2024.06.16@sha256:0bea0bc394f7bc81829c74bf18bf7dc4d565cf4e7d2cafd99fb42b14d968d77d
    container_name: node-red
    networks:
      dockervlan:
        ipv4_address: "${DOCKER_VLAN_IP_PREFIX}.131"
    mac_address: "${NODE_RED_MAC_ADDRESS}"
    # expose:
    #   - "${NODE_RED_PORT}"
    dns: "${DNS_IP}"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      # to communicate with all the IOT devices
      - NET_RAW
    read_only: true
    # security_opt:
    #   - no-new-privileges:true
    tmpfs:
      - "/tmp:rw,noexec,nosuid,nodev,size=10m,mode=660,uid=${NODE_RED_USER},gid=${DOCKER_USER_GROUP}"
    volumes:
      - "${VOLUME_BASE_DIRECTORY}/node-red/data:/data:rw"
      - "${VOLUME_BASE_DIRECTORY}/node-red/cert:/cert:ro"
    user: "${NODE_RED_USER}:${DOCKER_USER_GROUP}"
    environment:
      - TZ=${TIMEZONE}
      - PORT=443
    restart: always

#   n8n:
#     image: n8nio/n8n:1.0.4@sha256:ec5f5a6cfbcda11d02ed9ea594735e59f8dd061338abf63da940c3710b874d0f
#     container_name: n8n
#     networks:
#       internal_network:
#         ipv4_address: "${INTERNAL_NETWORK_IP_PREFIX}.4"
#     expose:
#       - "${N8N_PORT}"
#     dns: "${DNS_IP}"
#     cap_drop:
#       - ALL
#     cap_add:
#       - NET_BIND_SERVICE
#       - CHOWN
#       - SETUID
#       - SETGID
#     read_only: true
#     tmpfs:
#       - "/tmp:rw,noexec,nosuid,nodev,size=10m,mode=660,uid=${N8N_USER},gid=${DOCKER_USER_GROUP}"
#     volumes:
#       - "${VOLUME_BASE_DIRECTORY}/n8n/node:/home/node:rw"
#     # user: "${N8N_USER}:${DOCKER_USER_GROUP}"
#     # seems not to work with a dedicated user, since during container start, the user/group gets changed:
#     # https://github.com/n8n-io/n8n/blob/5c65a73cc21ac4348eaae6b6b010980ff789cefe/docker/images/n8n/docker-entrypoint.sh
#     environment:
#       - GENERIC_TIMEZONE=${TIMEZONE}
#       - TZ=${TIMEZONE}
#       - DB_TYPE=sqlite
#       - N8N_PORT=${N8N_PORT}
#       - N8N_DIAGNOSTICS_ENABLED=false
#       #- N8N_BASIC_AUTH_USER_FILE=
#       #- N8N_BASIC_AUTH_PASSWORD_FILE=
#       #- N8N_BASIC_AUTH_HASH=true
#       # - N8N_EDITOR_BASE_URL=${N8N_URL}
#       # - WEBHOOK_URL=${N8N_URL}
#     restart: always

networks:
  dockervlan:
    name: dockervlan
    driver: macvlan
    driver_opts:
      parent: ovs_bond0
    ipam:
      config:
        - subnet: "${DOCKER_VLAN_IP_PREFIX}.0/24"
          ip_range: "${DOCKER_VLAN_IP_PREFIX}.128/25"
          gateway: "${DNS_IP}"
