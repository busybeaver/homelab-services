version: "3.9"
services:
  caddy:
    image: ghcr.io/busybeaver/homelab-packages/caddy:2023-04-08@sha256:eb37103fa2d68c2335089933fbebffdbaf56bbfb949a2abb93c37c47fbb0cf7d
    container_name: caddy
    network_mode: host
    labels:
       - networks=bridge
    # ports:
    #   - target: 80
    #     published: 80
    #     protocol: tcp
    #   - target: 443
    #     published: 443
    #     protocol: tcp
    dns: "${DNS_IP}"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - "/tmp:rw,noexec,nosuid,nodev,size=10m,mode=660,uid=${CADDY_USER},gid=${DOCKER_USER_GROUP}"
    volumes:
      - "${VOLUME_BASE_DIRECTORY}/caddy/data:/data:rw"
      - "${VOLUME_BASE_DIRECTORY}/caddy/config:/config:rw"
      - "${VOLUME_BASE_DIRECTORY}/caddy/certs:/certs:ro"
      - "${VOLUME_BASE_DIRECTORY}/caddy/Caddyfile:/etc/caddy/Caddyfile:ro"
    user: "${CADDY_USER}:${DOCKER_USER_GROUP}"
    environment:
      - "CF_API_TOKEN=${CF_API_TOKEN}"
    restart: always

# crowdsec:
#   image: crowdsecurity/crowdsec:v1.4.6-slim
#   container_name: crowdsec
#   networks:
#     internal_network:
#       ipv4_address: "${INTERNAL_NETWORK_IP_PREFIX}.5"
#   expose:
#     - "${CROWD_SEC_PORT}"
#   dns: "${DNS_IP}"
#   environment:
#     #this is the list of collections we want to install
#     #https://hub.crowdsec.net/author/crowdsecurity/collections/nginx
#     COLLECTIONS: "crowdsecurity/nginx"
#     GID: "${GID-1000}"
#   volumes:
#     - ./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml
#     - ${VOLUME_BASE_DIRECTORY}/caddy/data/caddy/logs:/var/log/caddy:ro
#     - crowdsec-db:/var/lib/crowdsec/data/
#     - crowdsec-config:/etc/crowdsec/
#   depends_on:
#     - caddy
#   restart: always

  # TODO: this needs to be put into the internal network
  homebridge:
    # port: "${HOMEBRIDGE_PORT}"
    image: oznu/homebridge:2023-01-08@sha256:f46e9c82e4f3449e18c2b61014ba13474343fed703537983db0f59a2a4b97c31
    container_name: homebridge
    network_mode: host
    dns: "${DNS_IP}"
    volumes:
      - ${VOLUME_BASE_DIRECTORY}/homebridge:/homebridge:rw
    environment:
      - "TZ=${TIMEZONE}"
      - PUID=${HOMEBRIDGE_USER}
      - PGID=100
#      - "PGID=${DOCKER_USER_GROUP}"
      - HOMEBRIDGE_CONFIG_UI=1
      - "HOMEBRIDGE_CONFIG_UI_PORT=${HOMEBRIDGE_PORT}"
      - DSM_HOSTNAME=station
    restart: always

  node-red:
    image: ghcr.io/busybeaver/homelab-packages/node-red:2023-04-08@sha256:0b0824e95e851205592a6739e165ccac7f708e505f845b580b4f46f4224f7453
    container_name: node-red
    networks:
      internal_network:
        ipv4_address: "${INTERNAL_NETWORK_IP_PREFIX}.3"
    expose:
      - "${NODE_RED_PORT}"
    dns: "${DNS_IP}"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - "/tmp:rw,noexec,nosuid,nodev,size=10m,mode=660,uid=${NODE_RED_USER},gid=${DOCKER_USER_GROUP}"
    volumes:
      - "${VOLUME_BASE_DIRECTORY}/node-red/data:/data:rw"
    user: "${NODE_RED_USER}:${DOCKER_USER_GROUP}"
    environment:
      - "TZ=${TIMEZONE}"
      - "PORT=${NODE_RED_PORT}"
    restart: always

  n8n:
    image: n8nio/n8n:0.236.2@sha256:f8b3ec0750156b356867fb121c277ef55f0061b1a65fc51fb6f9e9ceba26dfcb
    container_name: n8n
    networks:
      internal_network:
        ipv4_address: "${INTERNAL_NETWORK_IP_PREFIX}.4"
    expose:
      - "${N8N_PORT}"
    dns: "${DNS_IP}"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - "/tmp:rw,noexec,nosuid,nodev,size=10m,mode=660,uid=${N8N_USER},gid=${DOCKER_USER_GROUP}"
    volumes:
      - "${VOLUME_BASE_DIRECTORY}/n8n/node:/home/node:rw"
    # user: "${N8N_USER}:${DOCKER_USER_GROUP}"
    # seems not to work with a dedicated user, since during container start, the user/group gets changed:
    # https://github.com/n8n-io/n8n/blob/5c65a73cc21ac4348eaae6b6b010980ff789cefe/docker/images/n8n/docker-entrypoint.sh
    environment:
      - "GENERIC_TIMEZONE=${TIMEZONE}"
      - "TZ=${TIMEZONE}"
      - DB_TYPE=sqlite
      - "N8N_PORT=${N8N_PORT}"
      - N8N_DIAGNOSTICS_ENABLED=false
      #- N8N_BASIC_AUTH_USER_FILE=
      #- N8N_BASIC_AUTH_PASSWORD_FILE=
      #- N8N_BASIC_AUTH_HASH=true
      - "N8N_EDITOR_BASE_URL=${N8N_URL}"
      - "WEBHOOK_URL=${N8N_URL}"
    restart: always
networks:
  internal_network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      config:
        - subnet: "${INTERNAL_NETWORK_IP_PREFIX}.0/24"
  # external_network:
  #   driver: bridge
  #   driver_opts:
  #     com.docker.network.enable_ipv6: "false"
  #   ipam:
  #     config:
  #       - subnet: "${EXTERNAL_NETWORK_IP_PREFIX}.0/16"
